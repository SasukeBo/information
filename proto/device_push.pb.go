// Code generated by protoc-gen-go. DO NOT EDIT.
// source: device_push.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Product struct {
	InstanceId           int32    `protobuf:"varint,1,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	DeviceId             int32    `protobuf:"varint,2,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Product) Reset()         { *m = Product{} }
func (m *Product) String() string { return proto.CompactTextString(m) }
func (*Product) ProtoMessage()    {}
func (*Product) Descriptor() ([]byte, []int) {
	return fileDescriptor_85c49a5f9e77a898, []int{0}
}

func (m *Product) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Product.Unmarshal(m, b)
}
func (m *Product) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Product.Marshal(b, m, deterministic)
}
func (m *Product) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Product.Merge(m, src)
}
func (m *Product) XXX_Size() int {
	return xxx_messageInfo_Product.Size(m)
}
func (m *Product) XXX_DiscardUnknown() {
	xxx_messageInfo_Product.DiscardUnknown(m)
}

var xxx_messageInfo_Product proto.InternalMessageInfo

func (m *Product) GetInstanceId() int32 {
	if m != nil {
		return m.InstanceId
	}
	return 0
}

func (m *Product) GetDeviceId() int32 {
	if m != nil {
		return m.DeviceId
	}
	return 0
}

type Device struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Device) Reset()         { *m = Device{} }
func (m *Device) String() string { return proto.CompactTextString(m) }
func (*Device) ProtoMessage()    {}
func (*Device) Descriptor() ([]byte, []int) {
	return fileDescriptor_85c49a5f9e77a898, []int{1}
}

func (m *Device) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Device.Unmarshal(m, b)
}
func (m *Device) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Device.Marshal(b, m, deterministic)
}
func (m *Device) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Device.Merge(m, src)
}
func (m *Device) XXX_Size() int {
	return xxx_messageInfo_Device.Size(m)
}
func (m *Device) XXX_DiscardUnknown() {
	xxx_messageInfo_Device.DiscardUnknown(m)
}

var xxx_messageInfo_Device proto.InternalMessageInfo

func (m *Device) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type Response struct {
	Ok                   bool     `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_85c49a5f9e77a898, []int{2}
}

func (m *Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Response.Unmarshal(m, b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Response.Marshal(b, m, deterministic)
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return xxx_messageInfo_Response.Size(m)
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *Response) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*Product)(nil), "proto.Product")
	proto.RegisterType((*Device)(nil), "proto.Device")
	proto.RegisterType((*Response)(nil), "proto.Response")
}

func init() { proto.RegisterFile("device_push.proto", fileDescriptor_85c49a5f9e77a898) }

var fileDescriptor_85c49a5f9e77a898 = []byte{
	// 242 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x50, 0xbd, 0x4e, 0xc3, 0x30,
	0x10, 0x26, 0x91, 0xda, 0xa6, 0x07, 0xb4, 0xe2, 0xa6, 0x88, 0x0e, 0xa0, 0x4c, 0x9d, 0x2c, 0x44,
	0x79, 0x82, 0x0a, 0x09, 0x75, 0x8b, 0xc2, 0x03, 0x54, 0x21, 0x3e, 0xb5, 0x56, 0x69, 0x6c, 0x72,
	0x36, 0xe2, 0xf1, 0x91, 0x7f, 0x02, 0x4b, 0xa7, 0xf3, 0x7d, 0x7f, 0xf6, 0x67, 0xb8, 0x93, 0xf4,
	0xad, 0x3a, 0xda, 0x1b, 0xc7, 0x47, 0x61, 0x06, 0x6d, 0x35, 0x4e, 0xc2, 0xa8, 0xde, 0x60, 0x56,
	0x0f, 0x5a, 0xba, 0xce, 0xe2, 0x03, 0x5c, 0xab, 0x9e, 0x6d, 0xdb, 0x77, 0xb4, 0x57, 0xb2, 0xcc,
	0x1e, 0xb3, 0xf5, 0xa4, 0x81, 0x11, 0xda, 0x49, 0x5c, 0xc1, 0x3c, 0xe5, 0x28, 0x59, 0xe6, 0x81,
	0x2e, 0x22, 0xb0, 0x93, 0x55, 0x09, 0xd3, 0xd7, 0x70, 0xc6, 0x05, 0xe4, 0x7f, 0xf6, 0x5c, 0xc9,
	0xea, 0x05, 0x8a, 0x86, 0xd8, 0xe8, 0x9e, 0x03, 0xa7, 0x4f, 0x81, 0x2b, 0x9a, 0x5c, 0x9f, 0xb0,
	0x84, 0xd9, 0x99, 0x98, 0xdb, 0x03, 0x85, 0xc0, 0x79, 0x33, 0xae, 0xcf, 0x5f, 0x00, 0x31, 0xaf,
	0x76, 0x7c, 0x44, 0x01, 0xe0, 0xe7, 0xbb, 0x6d, 0xad, 0x63, 0xbc, 0x8d, 0x1d, 0x44, 0x14, 0xdc,
	0x2f, 0xd3, 0x3a, 0xde, 0x52, 0x5d, 0xe1, 0x06, 0x6e, 0xbc, 0x3e, 0x55, 0x63, 0x5c, 0x24, 0x49,
	0x02, 0x2e, 0x58, 0xd6, 0xd9, 0xf6, 0x09, 0x56, 0x4a, 0x8b, 0xc3, 0x60, 0x3a, 0x41, 0x3f, 0xed,
	0xd9, 0x7c, 0x12, 0x8b, 0xd8, 0xcf, 0xff, 0xdb, 0x76, 0xf9, 0xff, 0x9e, 0xda, 0x9b, 0xeb, 0xec,
	0x63, 0x1a, 0x52, 0x36, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x5b, 0x4d, 0xe2, 0x62, 0x60, 0x01,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DevicePushClient is the client API for DevicePush service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DevicePushClient interface {
	// A simple RPC.
	//
	// Push a device status change to web server when tcp server record device status change
	PushStatus(ctx context.Context, in *Device, opts ...grpc.CallOption) (*Response, error)
	// A client-to-server streaming RPC.
	//
	// Push products produced by device
	PushProducts(ctx context.Context, opts ...grpc.CallOption) (DevicePush_PushProductsClient, error)
}

type devicePushClient struct {
	cc *grpc.ClientConn
}

func NewDevicePushClient(cc *grpc.ClientConn) DevicePushClient {
	return &devicePushClient{cc}
}

func (c *devicePushClient) PushStatus(ctx context.Context, in *Device, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/proto.DevicePush/PushStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicePushClient) PushProducts(ctx context.Context, opts ...grpc.CallOption) (DevicePush_PushProductsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DevicePush_serviceDesc.Streams[0], "/proto.DevicePush/PushProducts", opts...)
	if err != nil {
		return nil, err
	}
	x := &devicePushPushProductsClient{stream}
	return x, nil
}

type DevicePush_PushProductsClient interface {
	Send(*Product) error
	CloseAndRecv() (*Response, error)
	grpc.ClientStream
}

type devicePushPushProductsClient struct {
	grpc.ClientStream
}

func (x *devicePushPushProductsClient) Send(m *Product) error {
	return x.ClientStream.SendMsg(m)
}

func (x *devicePushPushProductsClient) CloseAndRecv() (*Response, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DevicePushServer is the server API for DevicePush service.
type DevicePushServer interface {
	// A simple RPC.
	//
	// Push a device status change to web server when tcp server record device status change
	PushStatus(context.Context, *Device) (*Response, error)
	// A client-to-server streaming RPC.
	//
	// Push products produced by device
	PushProducts(DevicePush_PushProductsServer) error
}

// UnimplementedDevicePushServer can be embedded to have forward compatible implementations.
type UnimplementedDevicePushServer struct {
}

func (*UnimplementedDevicePushServer) PushStatus(ctx context.Context, req *Device) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushStatus not implemented")
}
func (*UnimplementedDevicePushServer) PushProducts(srv DevicePush_PushProductsServer) error {
	return status.Errorf(codes.Unimplemented, "method PushProducts not implemented")
}

func RegisterDevicePushServer(s *grpc.Server, srv DevicePushServer) {
	s.RegisterService(&_DevicePush_serviceDesc, srv)
}

func _DevicePush_PushStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Device)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicePushServer).PushStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DevicePush/PushStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicePushServer).PushStatus(ctx, req.(*Device))
	}
	return interceptor(ctx, in, info, handler)
}

func _DevicePush_PushProducts_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DevicePushServer).PushProducts(&devicePushPushProductsServer{stream})
}

type DevicePush_PushProductsServer interface {
	SendAndClose(*Response) error
	Recv() (*Product, error)
	grpc.ServerStream
}

type devicePushPushProductsServer struct {
	grpc.ServerStream
}

func (x *devicePushPushProductsServer) SendAndClose(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *devicePushPushProductsServer) Recv() (*Product, error) {
	m := new(Product)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _DevicePush_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.DevicePush",
	HandlerType: (*DevicePushServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PushStatus",
			Handler:    _DevicePush_PushStatus_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PushProducts",
			Handler:       _DevicePush_PushProducts_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "device_push.proto",
}
